plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'nebula.lint' version '17.6.1'
    id "org.owasp.dependencycheck" version "6.5.3"
}

group 'no.unit.bibs'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "7.3.1"
}

allprojects {
    apply plugin: 'nebula.lint'
    gradleLint.rules = ['unused-dependency']
}

dependencyCheck {
    failBuildOnCVSS=5
}

dependencies {
    compileOnly group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.13.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.35'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.12.129'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'com.github.bibsysdev', name: 'core', version: '1.20.4'
    implementation group: 'com.github.bibsysdev', name: 'apigateway', version: '1.18.9'
    testImplementation group: 'com.github.bibsysdev', name: 'nvatestutils', version: '1.18.9'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.1.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'

    shadowJar {
        archiveClassifier.set('')
        zip64 true
    }
}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}

jar.enabled = false
project.tasks.build.dependsOn project.tasks.shadowJar

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
    toolVersion '8.41';    // your choice here
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacoco {
    toolVersion = "0.8.7"
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

