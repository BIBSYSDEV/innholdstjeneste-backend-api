AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Contents API and Handler

Parameters:
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/api/domainName'
    Description: (Optional) Custom domain name for the API endpoint
  CustomDomainBasePath:
    Type: String
    Default: 'contents'
    Description: (Optional) Base path mapping in CustomDomain
    AllowedPattern: "^[a-zA-Z0-9$\\-_.+!*'(),]*$"
    ConstraintDescription: "May contain only letters, numbers and one of $-_.+!*'(),"
  DynamoDBTableName:
    Type: String
    Default: 'contents'
    Description: DynamoDB table name
  BucketName:
    Type: String
    Default: 'contentsinnholdsinfo'
    Description: Contents S3 bucket name
  MaxConcurrency:
    Type: Number
    Default: 20
    Description: Max number of provisioned hot instances for a lambda function
  MinConcurrency:
    Type: Number
    Default: 1
    MaxValue: 1
    MinValue: 1
    Description: Min number of provisioned hot instances for a lambda function

Conditions:
  HasDomainName: !Not [!Equals [!Ref CustomDomain, '']]
  HasCustomDomainBasePath: !Not [!Equals [!Ref CustomDomainBasePath, '']]

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowMethods: '''OPTIONS, POST, GET, PUT'''
      AllowOrigin: '''*'''
    EndpointConfiguration: REGIONAL

Resources:

  AccessDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: accessToDynamDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'
        - PolicyName: accessToS3Bucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}'
                  - !Sub 'arn:aws:s3:::${BucketName}/*'

  ContentsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      DeletionPolicy: Retain
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: BucketPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
                  - /*
        Bucket: !Ref BucketName

  ContentsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "isbn"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "isbn"
          KeyType: "HASH"
      TableName: !Ref DynamoDBTableName
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ContentsApi:
    Type: AWS::Serverless::Api
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W64
            reason: "Skip access logging for artifacts bucket"
          - id: W68
            reason: "Skip encryption for artifacts bucket"
          - id: W69
            reason: "Skip bucket policy for artifacts bucket"
    Properties:
      Name: !Sub "${AWS::StackName}"
      StageName: v1
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*'
            - Effect: Deny
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/PUT/'
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/POST/'
              Condition:
                NotIpAddress:
                  'aws:SourceIp':
                    - 35.156.26.140
                    - 80.212.255.137
                    - 158.36.131.0/24

      DefinitionBody:
        openapi: 3.0.3
        info:
          title: Contents API
          version: '1.0'
        paths:
          /:
            get:
              description: "Search for contents by given isbn"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: isbn
                  description: "isbn to look for i contents."
                  required: false
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetContentsApiFunction.Arn}:live/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: "OK"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Contents'
                '404':
                  description: "Not Found"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Contents'
                '500':
                  description: "Internal Server Error"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Problem'
            post:
              description: "Adds contents"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: body
                  name: contents
                  description: "contents metadata"
                  required: true
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateContentsApiFunction.Arn}:live/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '201':
                  description: "Created"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Contents'
                '500':
                  description: "Internal Server Error"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Problem'
            put:
              description: "Update or adds contents"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: body
                  name: contents
                  description: "contents metadata"
                  required: true
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateContentsApiFunction.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: "OK"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Contents'
                '201':
                  description: "Created"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Contents'
                '500':
                  description: "Internal Server Error"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Problem'
          /{type}/{firstLinkPart}/{secondLinkPart}/{filename}:
            get:
              description: "Redirects to object in contents S3 bucket"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: type
                  description: "File type ('small', 'large' or 'original' if image, 'audio' if audio file)"
                  required: true
                  schema:
                    type: string
                - in: path
                  name: firstLinkPart
                  description: "Second last number of isbn"
                  required: true
                  schema:
                    type: string
                - in: path
                  name: secondLinkPart
                  description: "Last number of isbn"
                  required: true
                  schema:
                    type: string
                - in: path
                  name: filename
                  description: "Filename on format [isbn].[fileextension]. Eg. 9788205377547.jpg"
                  required: true
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetContentFileApiFunction.Arn}:live/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '301':
                  description: ""
                '404':
                  description: "Not Found"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Contents'
                '500':
                  description: "Internal Server Error"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Problem'
        definitions:
          Contents:
            type: object
          Problem:
            type: object
            description: Internal Server Error is logged
            properties:
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
              requestId:
                type: string

  GetContentsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Handler: no.unit.bibs.contents.GetContentsApiHandler::handleRequest
      Runtime: java11
      MemorySize: 1024
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce # Or Canary10Percent5Minutes, Linear10PercentEvery1Minute, ...
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt AccessDynamoDBRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DynamoDBTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref ContentsApi

  GetContentFileApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Handler: no.unit.bibs.contents.GetContentFileApiHandler::handleRequest
      Runtime: java11
      MemorySize: 1024
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce # Or Canary10Percent5Minutes, Linear10PercentEvery1Minute, ...
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt AccessDynamoDBRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DynamoDBTableName
          BUCKET_NAME: !Ref BucketName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{type}/{firstLinkPart}/{secondLinkPart}/{filename}
            Method: get
            RestApiId: !Ref ContentsApi

  CreateContentsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Handler: no.unit.bibs.contents.CreateContentsApiHandler::handleRequest
      Runtime: java11
      MemorySize: 1024
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce # Or Canary10Percent5Minutes, Linear10PercentEvery1Minute, ...
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt AccessDynamoDBRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DynamoDBTableName
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref ContentsApi

  UpdateContentsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Handler: no.unit.bibs.contents.UpdateContentsApiHandler::handleRequest
      Runtime: java11
      MemorySize: 1024
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce # Or Canary10Percent5Minutes, Linear10PercentEvery1Minute, ...
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt AccessDynamoDBRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DynamoDBTableName
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /
            Method: put
            RestApiId: !Ref ContentsApi

  GetContentsApiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${GetContentsApiFunction}:live # You need to specify an alis or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: GetContentsApiFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  GetContentsApiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: GetContentsApiFunctionScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref GetContentsApiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  CreateContentsApiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${CreateContentsApiFunction}:live # You need to specify an alis or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: CreateContentsApiFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  CreateContentsApiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CreateContentsApiFunctionScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref CreateContentsApiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  UpdateContentsApiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${UpdateContentsApiFunction}:live # You need to specify an alis or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: UpdateContentsApiFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  UpdateContentsApiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: UpdateContentsApiFunctionScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref UpdateContentsApiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  ContentsBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasDomainName
    Properties:
      BasePath: !If
        - HasCustomDomainBasePath
        - !Ref CustomDomainBasePath
        - !Ref 'AWS::NoValue'
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ContentsApi
      Stage: !Ref ContentsApi.Stage

Outputs:
  ApiEndpoint:
    Description: "Endpoint base URL for the API"
    Value: !If
      - HasDomainName
      - !Sub "https://${CustomDomain}/${CustomDomainBasePath}"
      - !Sub "https://${ContentsApi}.execute-api.${AWS::Region}.amazonaws.com/${ContentsApi.Stage}/"
